import{css as t,html as e,LitElement as i}from"lit-element";import{skeleton as r}from"../styles/skeleton";import{classMap as s}from"lit-html/directives/class-map";import"../atoms/gv-image";import"../atoms/gv-button";import"../molecules/gv-metrics";import"../molecules/gv-rating";import"../atoms/gv-state";import"../atoms/gv-tag";import{truncate as o}from"../lib/utils";import{i18n as l}from"../lib/i18n";import{ItemResource as a}from"../mixins/item-resource";import{dispatchCustomEvent as n}from"../lib/events";import{getVersion as d,getTitle as m,getDescription as p}from"../lib/item";export class GvCardFull extends(a(i)){static get properties(){return{metrics:{type:Object}}}static get styles(){return[...super.styles,t`:host{box-sizing:border-box;display:inline-block;margin:.2rem;vertical-align:middle;width:100%;padding:8px;max-height:281px;line-height:22px;font-size:var(--gv-theme-font-size-m,14px)}gv-identity-picture{height:var(--gv-card-full-image--h,65px);width:var(--gv-card-full-image--w,110px);--gv-image--of:contain}.card{display:flex;flex-direction:column;height:250px;background-color:var(--gv-card-full--bgc,var(--gv-theme-neutral-color-lightest,#fff));color:var(--gv-theme-font-color-dark,#262626);padding:16px;box-shadow:0 0 0 1px var(--gv-theme-neutral-color,#f5f5f5),0 1px 3px var(--gv-theme-neutral-color-dark,#bfbfbf);transition:transform .3s;border-radius: 12px;}.card:hover{transform:translateY(-4px);box-shadow:0 20px 40px -14px var(--gv-theme-neutral-color-dark,#bfbfbf);cursor:pointer}.card>div{display:flex}.image{min-height:65px;min-width:0;position:relative;padding-top:.2rem}.title{line-height:22px;font-size:var(--gv-theme-font-size-l,16px);text-transform:capitalize;font-weight:700}.content{flex:1;padding:10px}.version{color:var(--gv-theme-neutral-color-dark,#d9d9d9);padding:10px 8px;font-size:var(--gv-theme-font-size-s,12px)}.description{padding:0 16px;margin:6px 0;flex:1;flex-grow:1;max-height:150px;overflow:hidden;text-overflow:ellipsis}.infos{display:flex;border-bottom:1px solid var(--gv-theme-neutral-color-dark,#d9d9d9);padding:.5rem 0;justify-content:flex-end}gv-metrics{display:flex;height:100%;justify-content:flex-end;align-items:stretch}.skeleton .infos{border-bottom:none}.labels{padding:0 16px}.error .infos,.error .labels,.error .states{visibility:hidden}`,r]}constructor(){super(),this.limit=150}_onClick(t){this._empty||this._error||this._skeleton||t.target.tagName.toLowerCase().startsWith("gv-metrics")||n(this,"click",this._item)}render(){const t=m(this._item),i={error:this._error||this._empty,card:!0};return e`<div class="${s(i)}" title="${t}" @click="${this._onClick}"> <div class="${s({skeleton:this._skeleton})}"> <div class="${s({image:!0})}">${this._renderImage()}</div> <div class="content"> <div class="${s({title:!0})}">${t}</div> <div class="states">${this._renderStates()}</div> </div> <div class="version"><span class="${s({skeleton:this._skeleton})}">${d(this._item)}</span></div> </div> <div class="${s({skeleton:this._skeleton,description:!0})}"> ${o(this._error?l("gv-card-full.error"):this._empty?l("gv-card-full.empty"):p(this._item),this.limit)} </div> <span class="${s({skeleton:this._skeleton})}"> <div class="infos">${this._renderMetricsWithRating()}</div> <div class="labels">${this._renderLabels(!0)}</div> </span> </div>`}}window.customElements.define("gv-card-full",GvCardFull);
//# sourceMappingURL=gv-card-full.js.map