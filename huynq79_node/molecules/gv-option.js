import{css as t,LitElement as i,html as e}from"lit-element";import"../atoms/gv-button";import{repeat as s}from"lit-html/directives/repeat";import{classMap as n}from"lit-html/directives/class-map";import{dispatchCustomEvent as o}from"../lib/events";import{ifDefined as r}from"lit-html/directives/if-defined";import{styleMap as l}from"lit-html/directives/style-map";export class GvOption extends i{static get properties(){return{options:{type:Array},_options:{type:Array,attribute:!1},_hasDescription:{type:Array,attribute:!1},value:{type:String,reflect:!0},multiple:{type:Boolean},reverse:{type:Boolean},small:{type:Boolean},outlined:{type:Boolean},disabled:{type:Boolean,reflect:!0}}}static get styles(){return[t`:host{box-sizing:border-box;display:inline-block;--gv-button--p:5px;margin:.2rem;--bdrs:var(--gv-option--bdrs, 0.15rem);--maw:var(--gv-option-button--maw, 200px)}.box.description{display:grid;grid-gap:.5rem}gv-button{margin:0}gv-button.description{flex:1 1 var(--maw);max-width:var(--maw)}gv-button:not(.description){margin:0;--gv-button--bdrs:0;--gv-button--bgc:var(--gv-option--bgc, var(--gv-theme-neutral-color-dark, #bfbfbf))}gv-button:not(.description).entry{--gv-button--bdrs:var(--bdrs) 0 0 var(--bdrs)}gv-button:not(.description).exit{margin-left:10px;--gv-button--bdrs:0 var(--bdrs) var(--bdrs) 0}.content{white-space:pre-line;--gv-icon--s:var(--gv-option-icon--s, 64px);display:flex;flex-direction:column;align-items:center;height:100%;text-transform:none}gv-image{height:64px;width:64px;--gv-image--of:fill;display:inline-flex}.reverse .content{flex-direction:column-reverse}.title{font-size:var(--gv-theme-font-size-l,18px);font-weight:700;margin:.5rem 0}gv-button.description{margin:.5rem}`]}constructor(){super(),this.multiple=!1,this.reverse=!1}_onClick(t){this.setValue(t),o(this,"select",t),this.dispatchEvent(new Event("input"),{bubbles:!0,cancelable:!0})}async performUpdate(){return this.shadowRoot.querySelectorAll("gv-button").forEach(t=>t.performUpdate()),super.performUpdate()}setValue(t){t&&(this.multiple?this.value.includes(t.id)?this.value=this.value.filter(i=>i!==t.id):this.value=[...this.value,t.id]:this.value=t.id)}set options(t){t&&Promise.all(t).then(t=>{this._options=t,this._hasDescription=null!=this._options.find(t=>null!=t.description)})}isActive(t){return!!this.value&&(this.multiple?this.value.includes(t.id):this.value===t.id)}_renderOption(t,i){const s=this.isActive(t),o=this.outlined||!s&&this._hasDescription;return e`<gv-button .icon="${r(this._hasDescription?null:t.icon)}" .iconRight="${r(!t.icon&&t.iconRight?t.iconRight:null)}" .title="${r(t.title)}" .primary="${s}" .small="${this.small}" .disabled="${t.disabled||this.disabled}" @click="${this._onClick.bind(this,t)}" .outlined="${o}" class="${n({active:s,entry:0===i,exit:i===this._options.length-1,description:null!=t.description})}"> ${this._hasDescription?e`<div class="content"> ${t.icon?e`<gv-icon shape="${t.icon}"></gv-icon>`:t.image?e`<gv-image src="${t.image}"></gv-image>`:""} <div class="title">${t.title}</div> <div class="description-content" .innerHTML="${t.description}"></div> </div>`:null!=t.title?t.label||t.title:""} </gv-button>`}render(){if(this._options){const t={box:!0,description:this._hasDescription,reverse:this.reverse};return e`<div class="${n(t)}" style="${l({"grid-template-columns":`repeat(${this._options.length}, auto)`})}"> ${s(this._options,t=>t,(t,i)=>e`${this._renderOption(t,i)}`)} </div>`}return e``}}window.customElements.define("gv-option",GvOption);
//# sourceMappingURL=gv-option.js.map
